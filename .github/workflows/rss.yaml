name: rss
on:
  schedule:
    # hourly
    - cron: "0 * * * *"
  # TODO remove push
  push:
permissions:
  issues: write

jobs:
  get-releases:
    runs-on: ubuntu-latest
    container:
      image: alpine/xml:latest
    outputs:
      releases: ${{ steps.get.outputs.releases }}
    steps:
      - id: get
        run: |
          curl -O https://cloud.google.com/feeds/gcp-release-notes.xml
          releases=$(cat gcp-release-notes.xml | xq -c '.feed.entry[:50] | map(select(.content."#text" | ascii_upcase | contains("LOOKER"))) | map({title: .title, link: .link."@href"})')
          echo ${releases}
          echo releases=${releases} >> $GITHUB_OUTPUT

  create-issues:
    needs: get-releases
    runs-on: ubuntu-latest
    steps:
      # https://stackoverflow.com/questions/6980090/how-to-read-from-a-file-or-standard-input-in-bash
      - uses: nick-fields/retry@v2
        with:
          timeout_minutes: 1
          max_attempts: 3
          command: |
            label=rss
            gh label create $label --force --repo dr666m1/looker-toolkit # create label if not exists
            gh search issues --match title --repo $GITHUB_REPOSITORY --label $label --sort created --order desc --limit 50 > issues.txt
            cat issues.txt

            echo '${{ needs.get-releases.outputs.releases }}' |
            jq -c '.[]' |
            while read -r release; do
              title=$(echo $release | jq -c -r '.title')
              link=$(echo $release | jq -c -r '.link')
              if grep "$title" issues.txt > /dev/null; then
                echo skipping "$title"
              else
                gh issue create --label $label --repo $GITHUB_REPOSITORY --title "$title" --body "$link"
              fi
            done
            false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
